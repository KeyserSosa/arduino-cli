// Code generated by protoc-gen-go. DO NOT EDIT.
// source: commands/upload.proto

package commands

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UploadReq struct {
	// Arduino Core Service instance from the `Init` response.
	Instance *Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Fully qualified board name of the target board (e.g., `arduino:avr:uno`).
	// If this field is not defined, the FQBN of the board attached to the sketch
	// via the `BoardAttach` method is used.
	Fqbn string `protobuf:"bytes,2,opt,name=fqbn,proto3" json:"fqbn,omitempty"`
	// Path where the sketch to be uploaded is stored. Unless the `import_file`
	// field is defined, the compiled binary is assumed to be at the location and
	// filename under this path where it is saved by the `Compile` method.
	SketchPath string `protobuf:"bytes,3,opt,name=sketch_path,json=sketchPath,proto3" json:"sketch_path,omitempty"`
	// The port of the board.
	Port string `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	// Whether to turn on verbose output during the upload.
	Verbose bool `protobuf:"varint,5,opt,name=verbose,proto3" json:"verbose,omitempty"`
	// After upload, verify that the contents of the memory on the board match the
	// uploaded binary.
	Verify bool `protobuf:"varint,6,opt,name=verify,proto3" json:"verify,omitempty"`
	// When `import_file` is specified, it overrides the `import_dir` and `sketch_path`
	// params.
	ImportFile string `protobuf:"bytes,7,opt,name=import_file,json=importFile,proto3" json:"import_file,omitempty"`
	// Custom path to a directory containing compiled files. When `import_dir` is
	// not specified, the standard build directory under `sketch_path` is used.
	ImportDir            string   `protobuf:"bytes,8,opt,name=import_dir,json=importDir,proto3" json:"import_dir,omitempty"`
	Programmer           string   `protobuf:"bytes,9,opt,name=programmer,proto3" json:"programmer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadReq) Reset()         { *m = UploadReq{} }
func (m *UploadReq) String() string { return proto.CompactTextString(m) }
func (*UploadReq) ProtoMessage()    {}
func (*UploadReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd642cc079f8acdb, []int{0}
}

func (m *UploadReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadReq.Unmarshal(m, b)
}
func (m *UploadReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadReq.Marshal(b, m, deterministic)
}
func (m *UploadReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadReq.Merge(m, src)
}
func (m *UploadReq) XXX_Size() int {
	return xxx_messageInfo_UploadReq.Size(m)
}
func (m *UploadReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadReq.DiscardUnknown(m)
}

var xxx_messageInfo_UploadReq proto.InternalMessageInfo

func (m *UploadReq) GetInstance() *Instance {
	if m != nil {
		return m.Instance
	}
	return nil
}

func (m *UploadReq) GetFqbn() string {
	if m != nil {
		return m.Fqbn
	}
	return ""
}

func (m *UploadReq) GetSketchPath() string {
	if m != nil {
		return m.SketchPath
	}
	return ""
}

func (m *UploadReq) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *UploadReq) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

func (m *UploadReq) GetVerify() bool {
	if m != nil {
		return m.Verify
	}
	return false
}

func (m *UploadReq) GetImportFile() string {
	if m != nil {
		return m.ImportFile
	}
	return ""
}

func (m *UploadReq) GetImportDir() string {
	if m != nil {
		return m.ImportDir
	}
	return ""
}

func (m *UploadReq) GetProgrammer() string {
	if m != nil {
		return m.Programmer
	}
	return ""
}

type UploadResp struct {
	// The output of the upload process.
	OutStream []byte `protobuf:"bytes,1,opt,name=out_stream,json=outStream,proto3" json:"out_stream,omitempty"`
	// The error output of the upload process.
	ErrStream            []byte   `protobuf:"bytes,2,opt,name=err_stream,json=errStream,proto3" json:"err_stream,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadResp) Reset()         { *m = UploadResp{} }
func (m *UploadResp) String() string { return proto.CompactTextString(m) }
func (*UploadResp) ProtoMessage()    {}
func (*UploadResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd642cc079f8acdb, []int{1}
}

func (m *UploadResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadResp.Unmarshal(m, b)
}
func (m *UploadResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadResp.Marshal(b, m, deterministic)
}
func (m *UploadResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadResp.Merge(m, src)
}
func (m *UploadResp) XXX_Size() int {
	return xxx_messageInfo_UploadResp.Size(m)
}
func (m *UploadResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadResp.DiscardUnknown(m)
}

var xxx_messageInfo_UploadResp proto.InternalMessageInfo

func (m *UploadResp) GetOutStream() []byte {
	if m != nil {
		return m.OutStream
	}
	return nil
}

func (m *UploadResp) GetErrStream() []byte {
	if m != nil {
		return m.ErrStream
	}
	return nil
}

type BurnBootloaderReq struct {
	// Arduino Core Service instance from the `Init` response.
	Instance *Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Fully qualified board name of the target board (e.g., `arduino:avr:uno`).
	Fqbn string `protobuf:"bytes,2,opt,name=fqbn,proto3" json:"fqbn,omitempty"`
	// The port of the programmer used to program the bootloader.
	Port string `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	// Whether to turn on verbose output during the programming.
	Verbose bool `protobuf:"varint,4,opt,name=verbose,proto3" json:"verbose,omitempty"`
	// After programming, verify the contents of the memory on the board match the
	// uploaded binary.
	Verify bool `protobuf:"varint,5,opt,name=verify,proto3" json:"verify,omitempty"`
	// The programmer to use for burning bootloader.
	Programmer           string   `protobuf:"bytes,6,opt,name=programmer,proto3" json:"programmer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BurnBootloaderReq) Reset()         { *m = BurnBootloaderReq{} }
func (m *BurnBootloaderReq) String() string { return proto.CompactTextString(m) }
func (*BurnBootloaderReq) ProtoMessage()    {}
func (*BurnBootloaderReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd642cc079f8acdb, []int{2}
}

func (m *BurnBootloaderReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BurnBootloaderReq.Unmarshal(m, b)
}
func (m *BurnBootloaderReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BurnBootloaderReq.Marshal(b, m, deterministic)
}
func (m *BurnBootloaderReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurnBootloaderReq.Merge(m, src)
}
func (m *BurnBootloaderReq) XXX_Size() int {
	return xxx_messageInfo_BurnBootloaderReq.Size(m)
}
func (m *BurnBootloaderReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BurnBootloaderReq.DiscardUnknown(m)
}

var xxx_messageInfo_BurnBootloaderReq proto.InternalMessageInfo

func (m *BurnBootloaderReq) GetInstance() *Instance {
	if m != nil {
		return m.Instance
	}
	return nil
}

func (m *BurnBootloaderReq) GetFqbn() string {
	if m != nil {
		return m.Fqbn
	}
	return ""
}

func (m *BurnBootloaderReq) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *BurnBootloaderReq) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

func (m *BurnBootloaderReq) GetVerify() bool {
	if m != nil {
		return m.Verify
	}
	return false
}

func (m *BurnBootloaderReq) GetProgrammer() string {
	if m != nil {
		return m.Programmer
	}
	return ""
}

type BurnBootloaderResp struct {
	// The output of the burn bootloader process.
	OutStream []byte `protobuf:"bytes,1,opt,name=out_stream,json=outStream,proto3" json:"out_stream,omitempty"`
	// The error output of the burn bootloader process.
	ErrStream            []byte   `protobuf:"bytes,2,opt,name=err_stream,json=errStream,proto3" json:"err_stream,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BurnBootloaderResp) Reset()         { *m = BurnBootloaderResp{} }
func (m *BurnBootloaderResp) String() string { return proto.CompactTextString(m) }
func (*BurnBootloaderResp) ProtoMessage()    {}
func (*BurnBootloaderResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd642cc079f8acdb, []int{3}
}

func (m *BurnBootloaderResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BurnBootloaderResp.Unmarshal(m, b)
}
func (m *BurnBootloaderResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BurnBootloaderResp.Marshal(b, m, deterministic)
}
func (m *BurnBootloaderResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurnBootloaderResp.Merge(m, src)
}
func (m *BurnBootloaderResp) XXX_Size() int {
	return xxx_messageInfo_BurnBootloaderResp.Size(m)
}
func (m *BurnBootloaderResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BurnBootloaderResp.DiscardUnknown(m)
}

var xxx_messageInfo_BurnBootloaderResp proto.InternalMessageInfo

func (m *BurnBootloaderResp) GetOutStream() []byte {
	if m != nil {
		return m.OutStream
	}
	return nil
}

func (m *BurnBootloaderResp) GetErrStream() []byte {
	if m != nil {
		return m.ErrStream
	}
	return nil
}

type ListProgrammersAvailableForUploadReq struct {
	Instance             *Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Fqbn                 string    `protobuf:"bytes,2,opt,name=fqbn,proto3" json:"fqbn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListProgrammersAvailableForUploadReq) Reset()         { *m = ListProgrammersAvailableForUploadReq{} }
func (m *ListProgrammersAvailableForUploadReq) String() string { return proto.CompactTextString(m) }
func (*ListProgrammersAvailableForUploadReq) ProtoMessage()    {}
func (*ListProgrammersAvailableForUploadReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd642cc079f8acdb, []int{4}
}

func (m *ListProgrammersAvailableForUploadReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListProgrammersAvailableForUploadReq.Unmarshal(m, b)
}
func (m *ListProgrammersAvailableForUploadReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListProgrammersAvailableForUploadReq.Marshal(b, m, deterministic)
}
func (m *ListProgrammersAvailableForUploadReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProgrammersAvailableForUploadReq.Merge(m, src)
}
func (m *ListProgrammersAvailableForUploadReq) XXX_Size() int {
	return xxx_messageInfo_ListProgrammersAvailableForUploadReq.Size(m)
}
func (m *ListProgrammersAvailableForUploadReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProgrammersAvailableForUploadReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListProgrammersAvailableForUploadReq proto.InternalMessageInfo

func (m *ListProgrammersAvailableForUploadReq) GetInstance() *Instance {
	if m != nil {
		return m.Instance
	}
	return nil
}

func (m *ListProgrammersAvailableForUploadReq) GetFqbn() string {
	if m != nil {
		return m.Fqbn
	}
	return ""
}

type ListProgrammersAvailableForUploadResp struct {
	Programmers          []*Programmer `protobuf:"bytes,1,rep,name=programmers,proto3" json:"programmers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListProgrammersAvailableForUploadResp) Reset()         { *m = ListProgrammersAvailableForUploadResp{} }
func (m *ListProgrammersAvailableForUploadResp) String() string { return proto.CompactTextString(m) }
func (*ListProgrammersAvailableForUploadResp) ProtoMessage()    {}
func (*ListProgrammersAvailableForUploadResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd642cc079f8acdb, []int{5}
}

func (m *ListProgrammersAvailableForUploadResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListProgrammersAvailableForUploadResp.Unmarshal(m, b)
}
func (m *ListProgrammersAvailableForUploadResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListProgrammersAvailableForUploadResp.Marshal(b, m, deterministic)
}
func (m *ListProgrammersAvailableForUploadResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProgrammersAvailableForUploadResp.Merge(m, src)
}
func (m *ListProgrammersAvailableForUploadResp) XXX_Size() int {
	return xxx_messageInfo_ListProgrammersAvailableForUploadResp.Size(m)
}
func (m *ListProgrammersAvailableForUploadResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProgrammersAvailableForUploadResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListProgrammersAvailableForUploadResp proto.InternalMessageInfo

func (m *ListProgrammersAvailableForUploadResp) GetProgrammers() []*Programmer {
	if m != nil {
		return m.Programmers
	}
	return nil
}

type Programmer struct {
	Platform             string   `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Programmer) Reset()         { *m = Programmer{} }
func (m *Programmer) String() string { return proto.CompactTextString(m) }
func (*Programmer) ProtoMessage()    {}
func (*Programmer) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd642cc079f8acdb, []int{6}
}

func (m *Programmer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Programmer.Unmarshal(m, b)
}
func (m *Programmer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Programmer.Marshal(b, m, deterministic)
}
func (m *Programmer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Programmer.Merge(m, src)
}
func (m *Programmer) XXX_Size() int {
	return xxx_messageInfo_Programmer.Size(m)
}
func (m *Programmer) XXX_DiscardUnknown() {
	xxx_messageInfo_Programmer.DiscardUnknown(m)
}

var xxx_messageInfo_Programmer proto.InternalMessageInfo

func (m *Programmer) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Programmer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Programmer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*UploadReq)(nil), "cc.arduino.cli.commands.UploadReq")
	proto.RegisterType((*UploadResp)(nil), "cc.arduino.cli.commands.UploadResp")
	proto.RegisterType((*BurnBootloaderReq)(nil), "cc.arduino.cli.commands.BurnBootloaderReq")
	proto.RegisterType((*BurnBootloaderResp)(nil), "cc.arduino.cli.commands.BurnBootloaderResp")
	proto.RegisterType((*ListProgrammersAvailableForUploadReq)(nil), "cc.arduino.cli.commands.ListProgrammersAvailableForUploadReq")
	proto.RegisterType((*ListProgrammersAvailableForUploadResp)(nil), "cc.arduino.cli.commands.ListProgrammersAvailableForUploadResp")
	proto.RegisterType((*Programmer)(nil), "cc.arduino.cli.commands.Programmer")
}

func init() { proto.RegisterFile("commands/upload.proto", fileDescriptor_cd642cc079f8acdb) }

var fileDescriptor_cd642cc079f8acdb = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x51, 0x8b, 0xd3, 0x40,
	0x10, 0xc7, 0x49, 0xda, 0xeb, 0x35, 0x53, 0x11, 0x5c, 0x50, 0x97, 0x03, 0xb5, 0x46, 0x85, 0x82,
	0x5c, 0x0a, 0xe7, 0xb3, 0x0f, 0x16, 0x3d, 0x50, 0xee, 0xe1, 0x88, 0xf8, 0xe2, 0x4b, 0xd9, 0x24,
	0xdb, 0xeb, 0x62, 0xb2, 0xbb, 0x37, 0xbb, 0x29, 0xdc, 0x07, 0xf2, 0xdb, 0xf8, 0xa1, 0x64, 0xb3,
	0xd9, 0xc6, 0x53, 0x0b, 0x82, 0xdc, 0x53, 0x67, 0xe6, 0x3f, 0x33, 0xff, 0xe9, 0x2f, 0x21, 0xf0,
	0xb0, 0x54, 0x4d, 0xc3, 0x64, 0x65, 0x96, 0xad, 0xae, 0x15, 0xab, 0x32, 0x8d, 0xca, 0x2a, 0xf2,
	0xb8, 0x2c, 0x33, 0x86, 0x55, 0x2b, 0xa4, 0xca, 0xca, 0x5a, 0x64, 0xa1, 0xeb, 0x64, 0xe8, 0x77,
	0x81, 0x92, 0xbe, 0x3f, 0xfd, 0x1e, 0x43, 0xf2, 0xa5, 0x5b, 0x90, 0xf3, 0x6b, 0xf2, 0x16, 0xa6,
	0x42, 0x1a, 0xcb, 0x64, 0xc9, 0x69, 0x34, 0x8f, 0x16, 0xb3, 0xb3, 0xe7, 0xd9, 0x81, 0x85, 0xd9,
	0xc7, 0xbe, 0x31, 0xdf, 0x8f, 0x10, 0x02, 0xe3, 0xcd, 0x75, 0x21, 0x69, 0x3c, 0x8f, 0x16, 0x49,
	0xde, 0xc5, 0xe4, 0x19, 0xcc, 0xcc, 0x37, 0x6e, 0xcb, 0xed, 0x5a, 0x33, 0xbb, 0xa5, 0xa3, 0x4e,
	0x02, 0x5f, 0xba, 0x64, 0x76, 0xeb, 0x86, 0xb4, 0x42, 0x4b, 0xc7, 0x7e, 0xc8, 0xc5, 0x84, 0xc2,
	0xf1, 0x8e, 0x63, 0xa1, 0x0c, 0xa7, 0x47, 0xf3, 0x68, 0x31, 0xcd, 0x43, 0x4a, 0x1e, 0xc1, 0x64,
	0xc7, 0x51, 0x6c, 0x6e, 0xe8, 0xa4, 0x13, 0xfa, 0xcc, 0xd9, 0x88, 0xc6, 0xcd, 0xae, 0x37, 0xa2,
	0xe6, 0xf4, 0xd8, 0xdb, 0xf8, 0xd2, 0xb9, 0xa8, 0x39, 0x79, 0x02, 0x7d, 0xb6, 0xae, 0x04, 0xd2,
	0x69, 0xa7, 0x27, 0xbe, 0xf2, 0x5e, 0x20, 0x79, 0x0a, 0xa0, 0x51, 0x5d, 0x21, 0x6b, 0x1a, 0x8e,
	0x34, 0xf1, 0xe3, 0x43, 0x25, 0xfd, 0x04, 0x10, 0x30, 0x19, 0xed, 0x96, 0xa9, 0xd6, 0xae, 0x8d,
	0x45, 0xce, 0x9a, 0x8e, 0xd4, 0xbd, 0x3c, 0x51, 0xad, 0xfd, 0xdc, 0x15, 0x9c, 0xcc, 0x11, 0x83,
	0x1c, 0x7b, 0x99, 0x23, 0x7a, 0x39, 0xfd, 0x11, 0xc1, 0x83, 0x55, 0x8b, 0x72, 0xa5, 0x94, 0x75,
	0x2b, 0x39, 0xde, 0x11, 0xfb, 0x80, 0x76, 0xf4, 0x77, 0xb4, 0xe3, 0x43, 0x68, 0x8f, 0x6e, 0xa1,
	0xbd, 0x8d, 0x66, 0xf2, 0x07, 0x9a, 0x1c, 0xc8, 0xef, 0xff, 0xe6, 0xbf, 0x11, 0xdd, 0xc0, 0xcb,
	0x0b, 0x61, 0xec, 0xe5, 0xde, 0xc5, 0xbc, 0xdb, 0x31, 0x51, 0xb3, 0xa2, 0xe6, 0xe7, 0x0a, 0xef,
	0xf2, 0x85, 0x4d, 0x25, 0xbc, 0xfa, 0x07, 0x6b, 0xa3, 0xc9, 0x07, 0x98, 0x0d, 0x14, 0x0c, 0x8d,
	0xe6, 0xa3, 0xc5, 0xec, 0xec, 0xc5, 0x41, 0xfb, 0x61, 0x61, 0xfe, 0xeb, 0x5c, 0x7a, 0x01, 0x30,
	0x48, 0xe4, 0x04, 0xa6, 0xba, 0x66, 0x76, 0xa3, 0xd0, 0x43, 0x4b, 0xf2, 0x7d, 0x4e, 0xee, 0x43,
	0x2c, 0xaa, 0xfe, 0xd6, 0x58, 0x54, 0xee, 0x7a, 0xc9, 0x1a, 0x1e, 0x1e, 0xaf, 0x8b, 0x57, 0xa7,
	0x5f, 0x5f, 0x5f, 0x09, 0xbb, 0x6d, 0x0b, 0x67, 0xbc, 0xec, 0x0f, 0x09, 0xbf, 0xa7, 0x65, 0x2d,
	0x96, 0xa8, 0xcb, 0x65, 0x38, 0xaa, 0x98, 0x74, 0x5f, 0x81, 0x37, 0x3f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xb5, 0x34, 0x36, 0x1f, 0x4e, 0x04, 0x00, 0x00,
}
